// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  email             String              @unique
  password          String
  avatar            String              @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  groups            Group[]             @relation("GroupMembers")
  messages          Message[]           @relation("UserMessages")
  groupsLed         Group[]             @relation("GroupLeaders")
  meetingsHosted    Meeting[]           @relation("MeetingHost")
  meetings          Meeting[]           @relation("MeetingParticipants")
  verifications     UserVerification[]
  Notification      Notification[]
  GroupNotification GroupNotification[]
  sessions          Session[]
  RSVPs             RSVP[]
}

model UserVerification {
  id     Int    @id @default(autoincrement())
  userID Int    @unique
  otp    String
  user   User   @relation(fields: [userID], references: [id])
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  leaderId    Int
  leader      User      @relation("GroupLeaders", fields: [leaderId], references: [id])
  members     User[]    @relation("GroupMembers")
  joinCode    String    @unique
  createdAt   DateTime  @default(now())
  messages    Message[] @relation("GroupMessages")
  sessions    Session[]
  meetings    Meeting[]

  Meeting Meeting[] @relation("MeetingGroup")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model GroupNotification {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  type      String // "message", "connect", "comment", etc.
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  groupId     Int
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  RSVPs       RSVP[]
}

model RSVP {
  id        Int        @id @default(autoincrement())
  status    RSVPStatus
  session   Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([sessionId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  groupId   Int
  isDeleted Boolean  @default(false)
  isDeletedForEveryone Boolean   @default(false)
  deletedFor          Int[]      @default([])
  deletedAt           DateTime?
  user      User     @relation("UserMessages", fields: [userId], references: [id])
  group     Group    @relation("GroupMessages", fields: [groupId], references: [id],onDelete: Cascade)
}

enum RSVPStatus {
  ACCEPTED
  DECLINED
  TENTATIVE
}

model Meeting {
  id           Int      @id @default(autoincrement())
  title        String
  startTime    DateTime
  duration     Int // Duration in minutes
  meetingId    String   @unique // Unique meeting ID for joining
  password     String // Meeting password
  description  String?
  group        Group    @relation("MeetingGroup", fields: [groupId], references: [id])
  groupId      Int
  host         User     @relation("MeetingHost", fields: [hostId], references: [id])
  hostId       Int
  participants User[]   @relation("MeetingParticipants")
  createdAt    DateTime @default(now())
  Group        Group[]
}
